// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/database/database.go

// Package database_test is a generated GoMock package.
package database_test

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMigrator is a mock of IMigrator interface.
type MockIMigrator struct {
	ctrl     *gomock.Controller
	recorder *MockIMigratorMockRecorder
}

// MockIMigratorMockRecorder is the mock recorder for MockIMigrator.
type MockIMigratorMockRecorder struct {
	mock *MockIMigrator
}

// NewMockIMigrator creates a new mock instance.
func NewMockIMigrator(ctrl *gomock.Controller) *MockIMigrator {
	mock := &MockIMigrator{ctrl: ctrl}
	mock.recorder = &MockIMigratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMigrator) EXPECT() *MockIMigratorMockRecorder {
	return m.recorder
}

// Up mocks base method.
func (m *MockIMigrator) Up(db *sql.DB, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Up", db, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Up indicates an expected call of Up.
func (mr *MockIMigratorMockRecorder) Up(db, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockIMigrator)(nil).Up), db, dir)
}
