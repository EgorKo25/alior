// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/service/cms.go

// Package service_test is a generated GoMock package.
package service_test

import (
	broker "callback_service/src/broker"
	database "callback_service/src/database"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp091 "github.com/rabbitmq/amqp091-go"
)

// MockIBroker is a mock of IBroker interface.
type MockIBroker struct {
	ctrl     *gomock.Controller
	recorder *MockIBrokerMockRecorder
}

// MockIBrokerMockRecorder is the mock recorder for MockIBroker.
type MockIBrokerMockRecorder struct {
	mock *MockIBroker
}

// NewMockIBroker creates a new mock instance.
func NewMockIBroker(ctrl *gomock.Controller) *MockIBroker {
	mock := &MockIBroker{ctrl: ctrl}
	mock.recorder = &MockIBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBroker) EXPECT() *MockIBrokerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIBroker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIBrokerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIBroker)(nil).Close))
}

// NewMessage mocks base method.
func (m *MockIBroker) NewMessage(body, msgType string) *broker.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessage", body, msgType)
	ret0, _ := ret[0].(*broker.Message)
	return ret0
}

// NewMessage indicates an expected call of NewMessage.
func (mr *MockIBrokerMockRecorder) NewMessage(body, msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockIBroker)(nil).NewMessage), body, msgType)
}

// Publish mocks base method.
func (m *MockIBroker) Publish(message *broker.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIBrokerMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIBroker)(nil).Publish), message)
}

// Subscribe mocks base method.
func (m *MockIBroker) Subscribe(ctx context.Context, handler func(context.Context, amqp091.Delivery) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIBrokerMockRecorder) Subscribe(ctx, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIBroker)(nil).Subscribe), ctx, handler)
}

// MockICallback is a mock of ICallback interface.
type MockICallback struct {
	ctrl     *gomock.Controller
	recorder *MockICallbackMockRecorder
}

// MockICallbackMockRecorder is the mock recorder for MockICallback.
type MockICallbackMockRecorder struct {
	mock *MockICallback
}

// NewMockICallback creates a new mock instance.
func NewMockICallback(ctrl *gomock.Controller) *MockICallback {
	mock := &MockICallback{ctrl: ctrl}
	mock.recorder = &MockICallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICallback) EXPECT() *MockICallbackMockRecorder {
	return m.recorder
}

// CreateCallback mocks base method.
func (m *MockICallback) CreateCallback(ctx context.Context, data *database.Callback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallback", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCallback indicates an expected call of CreateCallback.
func (mr *MockICallbackMockRecorder) CreateCallback(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallback", reflect.TypeOf((*MockICallback)(nil).CreateCallback), ctx, data)
}

// DeleteCallbackByID mocks base method.
func (m *MockICallback) DeleteCallbackByID(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCallbackByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCallbackByID indicates an expected call of DeleteCallbackByID.
func (mr *MockICallbackMockRecorder) DeleteCallbackByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCallbackByID", reflect.TypeOf((*MockICallback)(nil).DeleteCallbackByID), ctx, id)
}

// GetCallback mocks base method.
func (m *MockICallback) GetCallback(ctx context.Context, limit, offset int) (*database.Callback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallback", ctx, limit, offset)
	ret0, _ := ret[0].(*database.Callback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallback indicates an expected call of GetCallback.
func (mr *MockICallbackMockRecorder) GetCallback(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallback", reflect.TypeOf((*MockICallback)(nil).GetCallback), ctx, limit, offset)
}

// GetTotalCallbacks mocks base method.
func (m *MockICallback) GetTotalCallbacks(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCallbacks", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCallbacks indicates an expected call of GetTotalCallbacks.
func (mr *MockICallbackMockRecorder) GetTotalCallbacks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCallbacks", reflect.TypeOf((*MockICallback)(nil).GetTotalCallbacks), ctx)
}

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockILogger) Error(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockILogger) Info(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), varargs...)
}
