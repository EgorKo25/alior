// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/broker/broker.go

// Package broker_test is a generated GoMock package.
package broker_test

import (
	broker "callback_service/src/broker"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp091 "github.com/rabbitmq/amqp091-go"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockILogger) Error(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockILogger) Info(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), varargs...)
}

// MockIConnectionManager is a mock of IConnectionManager interface.
type MockIConnectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionManagerMockRecorder
}

// MockIConnectionManagerMockRecorder is the mock recorder for MockIConnectionManager.
type MockIConnectionManagerMockRecorder struct {
	mock *MockIConnectionManager
}

// NewMockIConnectionManager creates a new mock instance.
func NewMockIConnectionManager(ctrl *gomock.Controller) *MockIConnectionManager {
	mock := &MockIConnectionManager{ctrl: ctrl}
	mock.recorder = &MockIConnectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectionManager) EXPECT() *MockIConnectionManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIConnectionManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIConnectionManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIConnectionManager)(nil).Close))
}

// Connect mocks base method.
func (m *MockIConnectionManager) Connect() (*amqp091.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*amqp091.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockIConnectionManagerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIConnectionManager)(nil).Connect))
}

// MockIChannelManager is a mock of IChannelManager interface.
type MockIChannelManager struct {
	ctrl     *gomock.Controller
	recorder *MockIChannelManagerMockRecorder
}

// MockIChannelManagerMockRecorder is the mock recorder for MockIChannelManager.
type MockIChannelManagerMockRecorder struct {
	mock *MockIChannelManager
}

// NewMockIChannelManager creates a new mock instance.
func NewMockIChannelManager(ctrl *gomock.Controller) *MockIChannelManager {
	mock := &MockIChannelManager{ctrl: ctrl}
	mock.recorder = &MockIChannelManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChannelManager) EXPECT() *MockIChannelManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIChannelManager) Close(channel *amqp091.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIChannelManagerMockRecorder) Close(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIChannelManager)(nil).Close), channel)
}

// CreateChannel mocks base method.
func (m *MockIChannelManager) CreateChannel(conn *amqp091.Connection) (*amqp091.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", conn)
	ret0, _ := ret[0].(*amqp091.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockIChannelManagerMockRecorder) CreateChannel(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockIChannelManager)(nil).CreateChannel), conn)
}

// GetExchange mocks base method.
func (m *MockIChannelManager) GetExchange() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchange")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExchange indicates an expected call of GetExchange.
func (mr *MockIChannelManagerMockRecorder) GetExchange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchange", reflect.TypeOf((*MockIChannelManager)(nil).GetExchange))
}

// GetQueue mocks base method.
func (m *MockIChannelManager) GetQueue() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockIChannelManagerMockRecorder) GetQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockIChannelManager)(nil).GetQueue))
}

// GetRoutingKey mocks base method.
func (m *MockIChannelManager) GetRoutingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRoutingKey indicates an expected call of GetRoutingKey.
func (mr *MockIChannelManagerMockRecorder) GetRoutingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingKey", reflect.TypeOf((*MockIChannelManager)(nil).GetRoutingKey))
}

// MockIBroker is a mock of IBroker interface.
type MockIBroker struct {
	ctrl     *gomock.Controller
	recorder *MockIBrokerMockRecorder
}

// MockIBrokerMockRecorder is the mock recorder for MockIBroker.
type MockIBrokerMockRecorder struct {
	mock *MockIBroker
}

// NewMockIBroker creates a new mock instance.
func NewMockIBroker(ctrl *gomock.Controller) *MockIBroker {
	mock := &MockIBroker{ctrl: ctrl}
	mock.recorder = &MockIBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBroker) EXPECT() *MockIBrokerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIBroker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIBrokerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIBroker)(nil).Close))
}

// NewMessage mocks base method.
func (m *MockIBroker) NewMessage(body, msgType string) *broker.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessage", body, msgType)
	ret0, _ := ret[0].(*broker.Message)
	return ret0
}

// NewMessage indicates an expected call of NewMessage.
func (mr *MockIBrokerMockRecorder) NewMessage(body, msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockIBroker)(nil).NewMessage), body, msgType)
}

// Publish mocks base method.
func (m *MockIBroker) Publish(message *broker.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIBrokerMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIBroker)(nil).Publish), message)
}

// Subscribe mocks base method.
func (m *MockIBroker) Subscribe(ctx context.Context, handler func(context.Context, amqp091.Delivery) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIBrokerMockRecorder) Subscribe(ctx, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIBroker)(nil).Subscribe), ctx, handler)
}
