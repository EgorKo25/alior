// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/service/cms.go

// Package service_test is a generated GoMock package.
package service_test

import (
	database "callback_service/src/database"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBroker is a mock of IBroker interface.
type MockIBroker struct {
	ctrl     *gomock.Controller
	recorder *MockIBrokerMockRecorder
}

// MockIBrokerMockRecorder is the mock recorder for MockIBroker.
type MockIBrokerMockRecorder struct {
	mock *MockIBroker
}

// NewMockIBroker creates a new mock instance.
func NewMockIBroker(ctrl *gomock.Controller) *MockIBroker {
	mock := &MockIBroker{ctrl: ctrl}
	mock.recorder = &MockIBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBroker) EXPECT() *MockIBrokerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockIBroker) Consume(ctx context.Context, queueName string, handler func(context.Context, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, queueName, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockIBrokerMockRecorder) Consume(ctx, queueName, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockIBroker)(nil).Consume), ctx, queueName, handler)
}

// Produce mocks base method.
func (m *MockIBroker) Produce(ctx context.Context, queueName string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, queueName, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockIBrokerMockRecorder) Produce(ctx, queueName, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockIBroker)(nil).Produce), ctx, queueName, body)
}

// MockICallback is a mock of ICallback interface.
type MockICallback struct {
	ctrl     *gomock.Controller
	recorder *MockICallbackMockRecorder
}

// MockICallbackMockRecorder is the mock recorder for MockICallback.
type MockICallbackMockRecorder struct {
	mock *MockICallback
}

// NewMockICallback creates a new mock instance.
func NewMockICallback(ctrl *gomock.Controller) *MockICallback {
	mock := &MockICallback{ctrl: ctrl}
	mock.recorder = &MockICallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICallback) EXPECT() *MockICallbackMockRecorder {
	return m.recorder
}

// CreateCallback mocks base method.
func (m *MockICallback) CreateCallback(ctx context.Context, data *database.Callback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallback", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCallback indicates an expected call of CreateCallback.
func (mr *MockICallbackMockRecorder) CreateCallback(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallback", reflect.TypeOf((*MockICallback)(nil).CreateCallback), ctx, data)
}

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockILogger) Error(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), varargs...)
}
