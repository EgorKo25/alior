// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"

	mock "github.com/stretchr/testify/mock"
)

// IChannel is an autogenerated mock type for the IChannel type
type IChannel struct {
	mock.Mock
}

// Ack provides a mock function with given fields: tag, multiple
func (_m *IChannel) Ack(tag uint64, multiple bool) error {
	ret := _m.Called(tag, multiple)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool) error); ok {
		r0 = rf(tag, multiple)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *IChannel) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Confirm provides a mock function with given fields: noWait
func (_m *IChannel) Confirm(noWait bool) error {
	ret := _m.Called(noWait)

	if len(ret) == 0 {
		panic("no return value specified for Confirm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(noWait)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: queue, consumer, autoAck, exclusive, noLocal, noWait, args
func (_m *IChannel) Consume(queue string, consumer string, autoAck bool, exclusive bool, noLocal bool, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.Called(queue, consumer, autoAck, exclusive, noLocal, noWait, args)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 <-chan amqp.Delivery
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, amqp.Table) (<-chan amqp.Delivery, error)); ok {
		return rf(queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, amqp.Table) <-chan amqp.Delivery); ok {
		r0 = rf(queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyPublish provides a mock function with given fields: confirm
func (_m *IChannel) NotifyPublish(confirm chan amqp.Confirmation) chan amqp.Confirmation {
	ret := _m.Called(confirm)

	if len(ret) == 0 {
		panic("no return value specified for NotifyPublish")
	}

	var r0 chan amqp.Confirmation
	if rf, ok := ret.Get(0).(func(chan amqp.Confirmation) chan amqp.Confirmation); ok {
		r0 = rf(confirm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan amqp.Confirmation)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: exchange, key, mandatory, immediate, msg
func (_m *IChannel) Publish(exchange string, key string, mandatory bool, immediate bool, msg amqp.Publishing) error {
	ret := _m.Called(exchange, key, mandatory, immediate, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, amqp.Publishing) error); ok {
		r0 = rf(exchange, key, mandatory, immediate, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueBind provides a mock function with given fields: name, key, exchange, noWait, args
func (_m *IChannel) QueueBind(name string, key string, exchange string, noWait bool, args amqp.Table) error {
	ret := _m.Called(name, key, exchange, noWait, args)

	if len(ret) == 0 {
		panic("no return value specified for QueueBind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, amqp.Table) error); ok {
		r0 = rf(name, key, exchange, noWait, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueDeclare provides a mock function with given fields: name, durable, autoDelete, exclusive, noWait, args
func (_m *IChannel) QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := _m.Called(name, durable, autoDelete, exclusive, noWait, args)

	if len(ret) == 0 {
		panic("no return value specified for QueueDeclare")
	}

	var r0 amqp.Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool, bool, amqp.Table) (amqp.Queue, error)); ok {
		return rf(name, durable, autoDelete, exclusive, noWait, args)
	}
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool, bool, amqp.Table) amqp.Queue); ok {
		r0 = rf(name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r0 = ret.Get(0).(amqp.Queue)
	}

	if rf, ok := ret.Get(1).(func(string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIChannel creates a new instance of IChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *IChannel {
	mock := &IChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
